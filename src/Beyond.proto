syntax = "proto3";

service BeyondClient {
   rpc TransactionalUpdate(BlockAndKey) returns (Error) {}
   rpc Insert(BlockAndKey) returns(Error) {}
   rpc Delete(BlockAndKey) returns(Error) {}
   rpc Query(Key) returns(Block) {}

   rpc Evict(Key) returns(Error) {}
   rpc Heal(Void) returns(Error) {}
}

service BeyondNode {
   // overlay
   rpc Describe(Void) returns (Peer) {}
   rpc Announce(Peer) returns (Void) {}
   rpc GetPeers(Void) returns (Peers) {}

   // delete this
   rpc Get(Key) returns (Blob) {}
   rpc Put(PutArgs) returns(Void) {}

   // local queries
   rpc AcquireLock(Lock) returns (Error) {}
   rpc ReleaseLock(Lock) returns (Error) {}
   rpc ForceAcquireLock(Lock) returns (Error) {}
   rpc Write(BlockAndKey) returns (Error) {}
   rpc WriteAndRelease(BlockAndLock) returns (Error) {}
   rpc HasBlock(Key) returns (Error) {}
   rpc DeleteBlock(BlockAndKey) returns (Error) {}
   rpc GetBlock(Key) returns (Block) {}

   // misc
   rpc ListKeys(Void) returns (KeyList) {}
}

message Lock {
  Key target = 1;
  int64 version = 2;
  Key lockUid = 3;
}

message BlockAndLock {
  BlockAndKey blockAndKey = 1;
  Lock lock = 2;
}

message Error {
  enum ErrorCode {
    OK = 0;
    ALREADY_LOCKED = 1;
    OUTDATED = 2;
    KEY_NOT_FOUND = 3;
    NOT_ENOUGH_PEERS = 4;
    CONFLICT = 5;
    EXCEPTION_THROWN = 6;
    VERIFICATION_FAILED = 7;
  }
  ErrorCode code = 1;
  int64 currentVersion = 2;
}
message BlockAndKey {
  Key key = 1;
  Block block = 2;
}

message KeyAndVersion {
  Key key = 1;
  int64 version = 2;
}

message PutArgs {
  Key key = 1;
  Blob blob = 2;
}
message Void {
  int32 whatever = 1;
}
message Peer {
   Key id = 1;
   repeated string addresses = 2;
   int32 port = 3;
}

message Peers {
  repeated Peer peers = 1;
}

message Key {
  bytes key = 1;
}
message Blob {
  bytes blob = 1;
}
message KeyList {
  repeated Key keys = 1;
}
message BlockOwnership {
  repeated Key owners = 1;
  uint64 uptodateMask = 2;
}

message SymLink {
  string target = 1;
}

message KeyAliasList {
  repeated KeyAlias keyAliases = 1;
}
message KeyAlias {
  string alias = 1;
  Key keyHash = 2;
}
message GroupKeyList {
  repeated bytes keys = 1;
}

message BlockData {
  FileIndex file = 1;
  DirectoryIndex directory = 2;
  SymLink symLink = 3;
  string mode = 4;
  KeyAliasList aliases = 5;
  GroupKeyList groupKeys = 6; // priv keys
}

message SignedData {
  int64 version = 1;
  bytes encryptedData = 2; // encrypted raw data for immutable
  bytes encryptedBlock = 3;
}

message Block {
  int64 version = 1;
  bytes raw = 2;
  BlockOwnership owners = 5;

  bool inheritReaders = 20;
  bool inheritWriters = 21;

  bytes groupPublicKey = 23;
  int64 groupVersion = 24;

  // maybe encrypted stuff
  BlockData data = 3;

  // crypto on
  SignedData signed = 9;
  bytes salt = 8;

  // immutable block
  Key owningBlock = 19;

  // mutable block
  Key owner = 10;
  KeyHashList writers = 11;
  Signature writersSignature = 12;
  EncryptionKeyList readers = 13;
  Signature readersSignature = 14;
  Signature encryptedDataSignature = 15;
  
  // ptr blocks
  Key pointer = 17;
}

message FileIndex {
  repeated FileBlock blocks = 1;
  uint64 size = 2;
}

message FileBlock {
  Key address = 1;
}
message DirectoryIndex {
  repeated DirectoryEntry entries = 1;
}
message DirectoryEntry {
  enum EntryType {
    FILE = 0;
    DIRECTORY = 1;
    SYMLINK = 3;
  }
  EntryType entryType = 1;
  string name = 2;
  Key address = 3;
}

message Signature {
  Key keyHash = 1;
  bytes signature = 2;
}

message KeyHashList {
  repeated Key keyHashes = 1;
}

message AESKey {
  bytes key = 1;
  bytes iv = 2;
}

message EncryptionKey {
  Key recipient = 1;
  bytes encryptedKeyIv = 2;
  int64 groupVersion = 3;
}

message EncryptionKeyList {
  repeated EncryptionKey encryptionKeys = 1;
}